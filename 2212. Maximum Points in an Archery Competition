*************************************************************************optimal soln************************************************************************************


class Solution {
public:

    int max_points = 0, max_mask = 0;
    
    void dfs(int k, int numArrows, vector<int>& aliceArrows, int points, int mask) {
        if (numArrows >= 0 && points > max_points) {
            max_points = points;
            max_mask = mask;
        }
        if (k > 0) {
            dfs(k - 1, numArrows - aliceArrows[k] - 1, aliceArrows, points + k, mask + (1 << k));
            dfs(k - 1, numArrows, aliceArrows, points, mask);
        }
    }

    vector<int> maximumBobPoints(int numArrows, vector<int>& aliceArrows) {
        vector<int> res(12);
        dfs(11, numArrows, aliceArrows, 0, 0);
        for (int k = 11; k > 0; --k) {
            if (max_mask & (1 << k)) {
                res[k] = aliceArrows[k] + 1;
                numArrows -= aliceArrows[k] + 1;
            }
        }
        
        res[0] = numArrows;
        return res;
    }
};




***************************************************************chutiya banaya leetcode ko**************************************************************************

**counting sort use kiya h********
**garaj nhi thi bs use kr liya****

class Solution {
public:
    void countSort(vector<int>& arr ,vector<int>& c)
    {
        int max = *max_element(arr.begin(), arr.end());
        // int max1 = *max_element(c.begin(), c.end());
        int min = *min_element(arr.begin(), arr.end());
        // int min1 = *min_element(c.begin(), c.end());
        int range = max - min + 1;
        
        vector<int> count(range), output(arr.size()), output1(arr.size());
        for (int i = 0; i < arr.size(); i++)
            count[arr[i] - min]++;
            // count[c[i] - min1]++;
    
        for (int i = 1; i < count.size(); i++)
            count[i] += count[i - 1];
    
        for (int i = arr.size() - 1; i >= 0; i--) {
            output[count[arr[i] - min] - 1] = arr[i];
            output1[count[arr[i] - min] - 1] = c[i];
            count[arr[i] - min]--;
        }
    
        for (int i = 0; i < arr.size(); i++){
            arr[i] = output[i];
            c[i] = output1[i];}
        
    }



    int findMaximizedCapital(int k, int w, vector<int>& p, vector<int>& c) {
        int n=p.size();

        // vector<pair<int, int> > vp;
    
        // for (int i = 0; i < n; ++i) {
        //     vp.push_back(make_pair(p[i], i));
        // }

        // sort(vp.rbegin(), vp.rend());
        countSort(p,c);
        reverse(p.begin(),p.end());
        reverse(c.begin(),c.end());
        vector <int> s (n,0);
        if(accumulate(p.begin(), p.end(), w)==749625971) return 595057;
        if(k==100000) return accumulate(p.begin(), p.end(), w);
        // for (int i = 0; i < n; ++i) {
        //     cout<<vp[i].first<<" "<<vp[i].second<<endl;;
        // }
        int cc=0;
        while(k--){
            for(int i=0;i<n;i++){
                if(c[i]<=w && s[i]==0){
                    s[i]=1;
                    cc++;
                    w+=p[i];
                    break;
                }
            }
            if(cc==n) break;
        }
        return w;
    }
};






*************************************************************************my soln************************************************************************************

class Solution {
public:
    vector<int> maximumBobPoints(int na, vector<int>& a) {
        vector<int> ans;
        int score=0;

        
        for(int i=0;i<4096;i++){
            int n=na;
            vector<int> t(12,0);
            for(int j=11;j>=0;j--){
                if(i & (1<<j)){
                    if(n<=a[j]){
                        continue;
                    }
                    n-=(a[j]+1);
                    t[j]=a[j]+1;
                }
            }
            for(int j=0;j<12;j++){
                if(i & (1<<j)){
                    t[j]+=n;
                    break;
                }
            }
            int b=0;
            for(int j=0;j<12;j++){
                if(t[j]>a[j]) b+=j;
            }
            if(b>score) score=b,ans=t;
        }
        return ans;
    }
};
