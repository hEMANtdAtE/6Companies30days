*****************************************my soln********************************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inOrderTraverse(TreeNode *root, vector<int>& vec)
    {
        if(root)
        {
            inOrderTraverse(root->left, vec);
            vec.push_back(root->val);
            inOrderTraverse(root->right, vec);

        }
    }

    void check(TreeNode *root, vector<vector<int>>& v){
        if(root){
            check(root->left,v);
            vector<int> v1;
            inOrderTraverse(root,v1);
            v.push_back(v1);
            v1.clear();
            check(root->right,v);
        }
    }


    int averageOfSubtree(TreeNode* root) {
        vector <int> vec;
        vector< vector<int>> v1;
        inOrderTraverse(root,vec);
        int c=0;
        vector<vector<int>> v;
        check(root,v);

        for(int i=0;i<v.size();i++){
            vector<int> v11;
            v11.push_back(accumulate(v[i].begin(), v[i].end(),0) );
            v11.push_back( v[i].size()  );
            v1.push_back(v11);
        }
        for(int i=0;i<v.size();i++){
            int t=v1[i][0];
            cout<<t<<" "<<v1[i][1]<<" ";
            // cout<<v[i][1]<<" "<<t<<" "<<em
            // if(t%v1[i][1]==0) t=t/v1[i][1];
            // else t=t%v1[i][1];
            // while(t>vec[i]){
            //     t=t/v1[i][1];
            // }
            t=t/v1[i][1];
            cout<<t<<" "<<vec[i]<<endl;
            if(t==vec[i]) c++;
        }
        return c;
    }
};


*****************************************optimal soln****************************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int averageOfSubtree(TreeNode* root) {
        dfs(root);
        return count;
    }
private:
    int count = 0;
    pair<int, int> dfs(TreeNode* root){
        if(!root)
            return {0, 0};
        auto left = dfs(root->left);
        auto right = dfs(root->right);
        int sum = left.first + right.first + root->val;
        int num = left.second + right.second + 1;
        if(sum/num == root->val)
            count++;
        return {sum, num};
    }
};

// return two value
// using pair<int, int>
