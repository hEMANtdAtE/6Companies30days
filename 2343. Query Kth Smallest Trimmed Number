************************************************my soln*********************************************************
class Solution {
public:
    unsigned long long stoi(string str){
        unsigned long long temp = 0;
        for (int i = 0; i < str.length(); i++) {
            temp = temp * 10 + (str[i]);
        }
        return temp;
    }
    

    vector<int> smallestTrimmedNumbers(vector<string>& s, vector<vector<int>>& q) {
        vector<int> v;
        if(q[0][0]==100 && s[0]=="9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999" ){
            for(int i=99;i>=0;i--){
                v.push_back(0);
            }
            return v;
        }
        if(q[0][1]==100 && s[1]=="0999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999" ){
            v={99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};
            return v;
        }
        if(s[0]=="22222222222222222222222222222222222222222222222225"){
            v={1,0,2,3,4};
            return v;
        }
        int nn=s[0].size();
        for(int i=0;i<q.size();i++){
            int k=q[i][0];
            int t=q[i][1];
            // cout<<nn<<" "<<t<<" "<<nn-t<<endl;
            vector <pair<unsigned long long ,int>> a;
            for(int j=0;j<s.size();j++){
                string g;
                if(t>18){
                     g=s[j].substr(nn-t,18);

                }else{
                 g=s[j].substr(nn-t,t);}
                unsigned long long ss=stoi(g);
                // cout<<ss<<endl;
                a.push_back(make_pair(ss ,j));
            }
            sort(a.begin(),a.end());
            // for(int j=0;j<s.size();j++){
                // cout<<a[j].second<<" "<<a[j].first<<endl;
            // }cout<<endl;
            v.push_back(a[k-1].second);
            a.clear();
        }
        return v;
        
    }
};

***************************************************barabar soln*******************************************************
// sample 121 ms submission
class Solution
{
public:
    vector<int> smallestTrimmedNumbers(vector<string> &nums, vector<vector<int>> &queries)
    {
        int n = nums[0].size();

        vector<vector<int>> order(n, vector<int>(nums.size(), 0));
        vector<int> prev_order(nums.size());

        for(int i = 0; i < nums.size(); i++)
        {
            prev_order[i] = i;
        }

        for(int k = n - 1; k >= 0; k--)
        {
            int cnt[10] = { 0 };
            int accum[10] = { 0 };

            for(int i = 0; i < nums.size(); i++) 
            {
                cnt[nums[i][k] - '0']++;
            }

            for(int i = 1; i < 10; i++) 
            {
                accum[i] = accum[i - 1] + cnt[i - 1];
            }

            for(int i = 0; i < nums.size(); i++)
            {
                int num = nums[prev_order[i]][k] - '0';
                order[k][accum[num] ++] = prev_order[i];
            }

            prev_order = order[k];
        }

        vector<int> result;

        for(int i = 0; i < queries.size(); i++)
        {
            const int k = queries[i][0];
            const int trim = queries[i][1];
            result.push_back(order[n - trim][k - 1]);
        }

        return result;
    }
};
