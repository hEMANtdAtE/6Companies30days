**************************************************my soln***********************************************
class Solution {
public:
    int findUnsortedSubarray(vector<int>& n) {
        vector <int> v=n;
        sort(v.begin(),v.end());
        int l=0,r=n.size()-1;
        while(l<n.size()){
            // if(l>n.size()) break;
            if(n[l]==v[l]) l++;
            else break;
        }
        while(r>0){
            // if(r==l) break;
            // if(r<0) break;
            if(n[r]==v[r]) r--;
            else break;
        }
        if(r-l < 0) return 0;
        return r-l+1;
        
    }
};
********************************************optimal soln***********************************************
class Solution {
public:
    int findUnsortedSubarray(vector<int>& arr) {
        int n=arr.size();
        int l=n-1;
        int r=0;
        if(n<2)return 0;
        for(int i=0;i<n-1;i++)
        {
            if(arr[i]>arr[i+1])
            {
                l=i;
                break;
            }
        }
        for(int i=n-1;i>0;i--)
        {
            if(arr[i]<arr[i-1])
            {
                r=i;
                break;
            }
        }
        if(l>r)return 0;
        int mn=arr[l];
        int mx=arr[l];
        for(int i=l;i<=r;i++)
        {
            mn=min(mn,arr[i]);
            mx=max(mx,arr[i]);
        }

        for(int i=l-1;i>=0;i--)
        {
            if(mn<arr[i])
            {
                mx=max(mx,arr[i]);
                l=i;
            }
        }
        
        for(int i=r+1;i<n;i++)
        {
            if(mx>arr[i])
            {
                mn=min(mn,arr[i]);
                r=i;
            }
        }

        return r-l+1;
    }
};
