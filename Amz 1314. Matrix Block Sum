**************************************************my soln***********************************************
class Solution {
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        int m=mat.size();
        int n=mat[0].size();
        vector<vector<int>> ans(m, vector<int> (n,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int l=max(0,i-k);
                int r=min(n-1,i+k);
                int u=max(0,j-k);
                int d=min(m-1,j+k);
                cout<<i<<" "<<j<<" "<<l<<" "<<r<<" "<<u<<" "<<d<<endl;
                for(int k=u;k<=d;k++){
                    int rr=r;
                    if(r!=n-1) rr++;
                    // for(int ii=l;ii<=r;ii++) {ans[j][i]+=mat[k][ii]; cout<<mat[k][ii]<<" ";}
                    // cout<<endl;
                    ans[j][i]=accumulate(mat[k].begin()+l, mat[k].begin()+r+1, ans[j][i]);
                }
                // cout<<endl;
            }
        }
        return ans;

    }
};




**********************************************optimal soln***********************************************
class Solution {
public: 
    int sizeX, sizeY;
    int extractSum(int i, int j, const vector<vector<int> >& sum) {
        if (i < 0 || j < 0) return 0;
        if (i >= sizeX) i = sizeX - 1;
        if (j >= sizeY) j = sizeY - 1;
        return sum[i][j];
    }
        
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int K) {
        sizeX = mat.size();
        sizeY = mat[0].size();
        
        vector<vector<int>> sum(sizeX, vector<int>(sizeY, 0));
        // Calculate prefix matrix 
        for (int i = 0; i < sizeX; i++) {
            for (int j = 0; j < sizeY; j++) {
                sum[i][j] = mat[i][j] + extractSum(i-1, j, sum) + extractSum(i, j-1, sum) - extractSum(i-1, j-1, sum);
            }
        }
        
        // Use prefix matrix to calculate our sum
        vector<vector<int>> ans(sizeX, vector<int>(sizeY, 0));
        for (int i = 0; i < sizeX; i++) {
            for (int j = 0; j < sizeY; j++) {
                ans[i][j] = extractSum(i+K, j+K, sum) - extractSum(i+K, j-K-1,sum) - extractSum (i-K-1, j+K, sum) + extractSum(i-K-1, j-K-1, sum);
            }
        }
        
        return ans;
    }
};
