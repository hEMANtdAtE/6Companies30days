class Solution {
public:
int V;
int minDistance(int dist[], bool sptSet[])
{
	int min = INT_MAX, min_index;
	for (int v = 0; v < V; v++)
		if (sptSet[v] == false && dist[v] <= min)
			min = dist[v], min_index = v;
	return min_index;
}

int printSolution(int dist[])
{
    int sum=0;
	cout << "Vertex \t Distance from Source" << endl;
	for (int i = 0; i < V; i++){
        sum=max(sum,dist[i]);
		cout << i << " \t\t\t\t" << dist[i] << endl;}
    return sum;
}

int dijkstra(vector<vector<int>> graph, int src)
{
	int dist[V]; 
	bool sptSet[V]; 
	for (int i = 0; i < V; i++)
		dist[i] = INT_MAX, sptSet[i] = false;
	dist[src] = 0;
	for (int count = 0; count < V - 1; count++) {
		int u = minDistance(dist, sptSet);
		sptSet[u] = true;

		for (int v = 0; v < V; v++)
			if (!sptSet[v] && graph[u][v]!=1e9&& dist[u] != INT_MAX&& dist[u] + graph[u][v] < dist[v])
				if(graph[src][v]!=1e9) dist[v] = min( graph[src][v], dist[u] + graph[u][v]);
                else dist[v]=dist[u] + graph[u][v];
	}
	return printSolution(dist);
}

    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        k--;
        V=n;
        vector <vector <int>> graph(n, vector<int> (n,1e9));
        for(int i=0;i<times.size();i++){
            for(int j=0;j<2;j++) {times[i][j]--; }
        }
        int s=0;
        vector <int> ans(n,0);
        for(int i=0;i<times.size();i++) {graph[times[i][0]][times[i][1]] = times[i][2];
            if(times[i][0] == k) ans[times[i][1]]=times[i][2];
            s=max(s,times[i][2]);
        }
        return dijkstra(graph,k)>s*n?-1:dijkstra(graph,k);
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++) cout<<graph[i][j]<<" ";
        //     cout<<endl;
        // }
        for(int i=0;i<n;i++){
            if(i==k) continue;
            for(int j=0;j<n;j++){
                if(i==j) continue;
                if( graph[k][j]!=1e9 ) ans[i]=min(graph[k][i], graph[k][j] + graph[j][i]);
                // if(i==1 && j==2) cout<<ans[i]<<" "<<graph[k][i]<<" "<<graph[k][j] + graph[j][i]<<endl;
            }
        }
        int sum=0;
        // ans[k]=1;
        for(auto it: ans) { 
            cout<<it<<" "; 
            // if(it==1e9) continue;
            sum=max(sum,it);
        }
        // cout<<endl;
        // int sum=*max_element(ans.begin(), ans.end());
        // sum= accumulate(ans.begin(), ans.end(), 0);
        if(sum==0) return -1;
        return sum==1e9?-1:sum ;
    }
};
