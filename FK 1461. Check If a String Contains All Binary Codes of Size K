********************************************************optimal soln**********************************************
// sample 41 ms submission
class Solution
{
public:
    bool hasAllCodes(string s, int k)
    {
        // bool exists[(1 << 20)] = {};
        int mask = (1 << k) - 1;
        vector<bool> exists(mask + 1, false);
        int key = 0;

        for(int i = 0; i < s.size(); ++i)
        {
            key = 2 * key + (s[i] == '1');
            key = key & mask;
        
            if(i >= k - 1)
            {
                exists[key] = true;
            }
        }

        for(int i = 0; i <= mask; ++i)
        {
            if(!exists[i]) 
            {
                return false;
            }
        }

        return true;
    }
};



*******************************************************prefered soln**********************************************

class Solution {
public:
    bool hasAllCodes(string s, int k) {
        unordered_set<string> u;
        for(int i=0, j=0; j<s.length(); j++){
            if(j-i+1==k){
                u.insert(s.substr(i, j-i+1));
                i++;
            }
        }
        return pow(2, k)==u.size();
    }
};



*************************************************************my soln**********************************************
class Solution {
public:
    bool hasAllCodes(string s, int k) {
        int n=s.size();
        map <string,int> mp;
        for(int i=0;i<=n-k;i++){
            string ss=s.substr(i,k);
            // cout<<ss<<endl;
            mp[ss]++;
        }
        if(mp.size()==pow(2,k)) return true;
        return false;
        
    }
};
