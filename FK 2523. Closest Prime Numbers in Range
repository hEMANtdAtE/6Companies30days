*************************************************************my soln*******************************************************
class Solution {
public:
    bool is(int no){
        if (no < 2){return false;}
        for (int i = 2; i <= no / 2; i++){
            if (no % i == 0){return false;}
        }
        return true;
    }


    vector<int> closestPrimes(int l, int r) {
        int prev=1e9;
        int previndex=1e9;
        int diff=1e9;
        int index =1e9;
        for(int i=l;i<=r;i++){
            if(is(i)){
                if((i-prev) ==1 || (i-prev) == 2) {
                    vector <int> v;
                    v.push_back(prev);
                    v.push_back(i);
                    return v;
                } 
                // cout<<i<<endl;
                if(prev==1e9){
                    prev=i;
                }
                else{
                    if(diff > i-prev) { index=i; previndex=prev; }
                    diff=min(diff,i-prev);
                    prev=i;
                }
            }
        }
        vector <int> v;
        if(index==1e9){
            v.push_back(-1);
            v.push_back(-1);
            return v;
        }
        v.push_back(previndex);
        v.push_back(index);
        return v;
    }
};





*********************************************************optimal soln*******************************************************
class Solution {
public:
    vector<int> closestPrimes(int left, int right) {
        vector<int> ret = {-1, -1};
        auto prev = -1;
        for (int i = left; i <= right; ++i) {
            if (isPrime(i)) {
                if (prev > 0) {
                    if (ret[0] < 0 || (i - prev < ret[1] - ret[0])) {
                        ret = {prev, i};
                        if (i - prev < 3) {
                            break;
                        }
                    }
                }
                prev = i;
            }
        }
        return ret;
    }
    
    bool isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        int max_end = sqrt(n);
        for (int i = 2; i <= max_end; ++i) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
};
