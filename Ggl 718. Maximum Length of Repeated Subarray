*********************************************my soln***********************************************
const int ZERO = [](){
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	return 0;
}();


class Solution {
public:
    vector <int> a,b;
    int n1,n2;


    int solve(int i, int j, vector <vector<int>> &dp){
        if(dp[i][j] != 1e9) return dp[i][j];
        int z=i, x=j;
        int ans=0;
        int rem=min((n2-j), (n1-i));
        for(int t=0;t<rem; t++){
            if(a[i]!=b[j]) break;
            i++;
            j++;
            ans++;
        }
        j=x;
        for(int t=z;t<i;t++){
            dp[t][j]=ans-t;
            j++;
        }
        return dp[z][x]=ans;
    }

    int findLength(vector<int>& nums1, vector<int>& nums2) {
        a=nums1;
        b=nums2;
        n1=nums1.size();
        n2=nums2.size();
        vector <vector<int>> dp(n1,  vector<int> (n2,1e9));
        int ans=0;
        for(int i=0;i<n1;i++){
            for(int j=0;j<n2;j++){
                ans =max(ans,solve(i,j,dp));
            }
        }
        return ans;
    }
};



*********************************************optimal***********************************************
class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        string first, second;
        for (auto i:nums1) first.push_back(i+'0');
        for (auto i:nums2) second.push_back(i+'0');
        int res = 0;
        string longest;
        for (auto l: first){
            longest.push_back(l);
            if (second.find(longest) != std::string::npos){
                res++;
            } 
            else longest = longest.erase(0,1);
        }
        return res;
    }
};
